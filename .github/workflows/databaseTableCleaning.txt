For each datatable: Answer- Is it scaled? Does scaling take place in function? Does scale storage take place in function?
	What cleaning is done before it is used?
	

Need to adapt wins_for_team to intake X, y OR Define Scales, X, y as global variables
Everything that's done to All_stats to eventually become X, y must be done to game_data


GAME DATA
# These columns have only null values for single games
all_stats.drop(columns = ['xwOBA', 'xERA'], inplace = True)
# applying the function to each column to ensure all data points are numerical
for col in all_stats.columns:
    if col not in ['Team', 'Date', 'GB']:
        all_stats[col] = all_stats[col].apply(string_to_num)

all_stats = all_stats.drop(columns = ['#_x', 'Team', 'G', 'PA', 'R',
       'Date', '#_y', 'L', 'SV', 'GS', 'IP', 'RBI', 'Unnamed: 0'])
# Only ~100 columns with null values
all_stats.dropna(inplace = True)
X = all_stats.drop(columns = ['W'])
cols = X.columns
y = all_stats['W']
#Scaling each column to be 
scaler = StandardScaler()
scaler.fit(X)
X = scaler.transform(X)
X = pd.DataFrame(X, columns = cols)
#Storing values used to scale each feature for manual normalization in later step
feat_names = np.append(scaler.get_feature_names_out()[:-1], 'WAR')
scales = pd.DataFrame({'Feature': feat_names, 'Unit Variance': scaler.scale_, 'Mean': scaler.mean_})
scales.set_index('Feature', inplace = True)